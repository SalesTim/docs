/**
 * nBold API
 * Visit our [API documentation](https://docs.nbold.co/api/get-started) for more information. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@nbold.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MetadataQueryResult from '../model/MetadataQueryResult';

/**
* Metadata service.
* @module api/MetadataApi
* @version 2.0.0
*/
export default class MetadataApi {

    /**
    * Constructs a new MetadataApi. 
    * @alias module:api/MetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryMetadata operation.
     * @callback module:api/MetadataApi~queryMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MetadataQueryResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query metadata
     * Query metadata for a specific namespace. TIER 2️⃣ | ROLES - AUTHORIZED_APP, INTEGRATION_MANAGER, GOVERNANCE_MANAGER, TEAMS_SERVICE_ADMIN, GLOBAL_ADMIN.
     * @param {String} namespace The metadata namespace.
     * @param {Object.<String, Object>} body Supply a JSON representation of your query.
     * @param {module:api/MetadataApi~queryMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MetadataQueryResult>}
     */
    queryMetadata(namespace, body, callback) {
      let postBody = body;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling queryMetadata");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling queryMetadata");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [MetadataQueryResult];
      return this.apiClient.callApi(
        '/metadata/{namespace}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
