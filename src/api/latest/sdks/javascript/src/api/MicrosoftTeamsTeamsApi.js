/**
 * nBold API
 * Visit our [API documentation](https://docs.nbold.co/api/get-started) for more information. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@nbold.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* MicrosoftTeamsTeams service.
* @module api/MicrosoftTeamsTeamsApi
* @version 2.0.0
*/
export default class MicrosoftTeamsTeamsApi {

    /**
    * Constructs a new MicrosoftTeamsTeamsApi. 
    * @alias module:api/MicrosoftTeamsTeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTeamNamespaceMetadata operation.
     * @callback module:api/MicrosoftTeamsTeamsApi~getTeamNamespaceMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team metadata
     * Get metadata for a team for a specific namespace.
     * @param {String} teamId The team ID.
     * @param {String} namespace The metadata namespace.
     * @param {module:api/MicrosoftTeamsTeamsApi~getTeamNamespaceMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getTeamNamespaceMetadata(teamId, namespace, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling getTeamNamespaceMetadata");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getTeamNamespaceMetadata");
      }

      let pathParams = {
        'teamId': teamId,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/teams/{teamId}/metadata/{namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTeamNamespaceMetadata operation.
     * @callback module:api/MicrosoftTeamsTeamsApi~setTeamNamespaceMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set team metadata
     * Set team metadata for a specific namespace. N.B Using the PUT method will replace all pre-existing metadata.
     * @param {String} teamId The team ID.
     * @param {String} namespace The metadata namespace.
     * @param {Object.<String, Object>} body Supply a JSON representation of your metadata.
     * @param {module:api/MicrosoftTeamsTeamsApi~setTeamNamespaceMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setTeamNamespaceMetadata(teamId, namespace, body, callback) {
      let postBody = body;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling setTeamNamespaceMetadata");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling setTeamNamespaceMetadata");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setTeamNamespaceMetadata");
      }

      let pathParams = {
        'teamId': teamId,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/teams/{teamId}/metadata/{namespace}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTeamNamespaceMetadata operation.
     * @callback module:api/MicrosoftTeamsTeamsApi~updateTeamNamespaceMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team metadata
     * Update a team metadata for a specific namespace. N.B Using the PATCH method will merge supplied body with pre-existing metadata.
     * @param {String} teamId The team ID.
     * @param {String} namespace The metadata namespace.
     * @param {Object.<String, Object>} body Supply a JSON representation of your metadata.
     * @param {module:api/MicrosoftTeamsTeamsApi~updateTeamNamespaceMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTeamNamespaceMetadata(teamId, namespace, body, callback) {
      let postBody = body;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling updateTeamNamespaceMetadata");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateTeamNamespaceMetadata");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTeamNamespaceMetadata");
      }

      let pathParams = {
        'teamId': teamId,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/teams/{teamId}/metadata/{namespace}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
