/**
 * nBold API
 * Visit our [API documentation](https://docs.nbold.co/api/get-started) for more information. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@nbold.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Report from '../model/Report';
import ReportUrl from '../model/ReportUrl';
import ReportsCategory from '../model/ReportsCategory';

/**
* Reports service.
* @module api/ReportsApi
* @version 2.0.0
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getReportUrl operation.
     * @callback module:api/ReportsApi~getReportUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report secure URL
     * Get report secure URL
     * @param {String} resourceType The resource type (dashboard / question).
     * @param {String} resourceId The resource id.
     * @param {module:api/ReportsApi~getReportUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportUrl}
     */
    getReportUrl(resourceType, resourceId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getReportUrl");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getReportUrl");
      }

      let pathParams = {
        'resource_type': resourceType,
        'resource_id': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportUrl;
      return this.apiClient.callApi(
        '/reports/{resource_type}/{resource_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReports operation.
     * @callback module:api/ReportsApi~getReportsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Report>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reports
     * Get reports
     * @param {module:api/ReportsApi~getReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Report>}
     */
    getReports(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Report];
      return this.apiClient.callApi(
        '/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsCategories operation.
     * @callback module:api/ReportsApi~getReportsCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportsCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reports categories
     * Get reports categories
     * @param {module:api/ReportsApi~getReportsCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReportsCategory>}
     */
    getReportsCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReportsCategory];
      return this.apiClient.callApi(
        '/reports/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
